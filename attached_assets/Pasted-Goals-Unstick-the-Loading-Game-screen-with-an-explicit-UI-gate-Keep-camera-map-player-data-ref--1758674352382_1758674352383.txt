Goals

Unstick the “Loading Game” screen with an explicit UI gate.

Keep camera/map/player data ref-based for perf.

Provide structural version ticks for rare re-renders.

Stop “useCamera … fallback” logs and HMR churn by stabilizing provider values.

1) client/src/contexts/GameContext.[tj]sx

Add const [isGameReady, setIsGameReady] = useState(false);

When the initialization state machine finishes and after calling setGameMap, setPlayer, setCamera:

camera.setWorldBounds(map.width, map.height);

camera.centerOn(player.x, player.y);

setIsGameReady(true);

Expose isGameReady from the provider value (memoized).

2) client/src/contexts/CameraContext.jsx

Keep cameraRef as the single source of truth.

Add const [cameraVersion, setCameraVersion] = useState(0);

Expose stable callbacks using useCallback: setCamera(cam), setWorldBounds(w,h), centerOn(x,y).

setWorldBounds should call cameraRef.current?.setWorldBounds(w,h) and then setCameraVersion(v => v + 1) (rare).

centerOn should not set state (no re-render).

Wrap the provider value in useMemo to keep identity stable:

const value = useMemo(() => ({
  cameraRef, setCamera, setWorldBounds, centerOn, cameraVersion
}), [setCamera, setWorldBounds, centerOn, cameraVersion]);


Update useCamera() to throw if context is missing (no “fallback”).

3) client/src/contexts/GameMapContext.jsx

Keep gameMapRef (no state on movement).

Add const [mapVersion, setMapVersion] = useState(0);

On successful map transition after placing the player on the spawn tile:

setMapVersion(v => v + 1);

Call camera structural updates:

const { setWorldBounds, centerOn } = useCamera();
setWorldBounds(newMap.width, newMap.height);
centerOn(player.x, player.y);


Memoize the provider value with useMemo and include mapVersion so consumers that actually need a render can depend on it.

4) client/src/components/Game/GameScreenContent.[tj]sx (or wherever “Loading Game” shows)

Replace the loading gate:

- if (initState !== 'complete') return <LoadingScreen label="Loading Game" />;
+ const { isGameReady } = useGame();
+ if (!isGameReady) return <LoadingScreen label="Loading Game" />;

5) Provider order & stability

Ensure providers mount above all consumers and are not conditional. Example:

<GameContextProvider>
  <CameraProvider>
    <GameMapProvider>
      <PlayerProvider>
        {children}
      </PlayerProvider>
    </GameMapProvider>
  </CameraProvider>
</GameContextProvider>

6) Acceptance criteria (verify via console logs)

Press “New Game” → “Loading Game” disappears immediately after init completes.

Camera centers on the player on first load and after every map transition.

During movement there are no React re-render storms; camera moves smoothly without state updates.

No “useCamera Context not available … fallback” messages after initial boot.

On map transition you see one mapVersion/cameraVersion bump (no per-frame bumps).

Provide full updated files for the four paths above, and note any other file you touch.