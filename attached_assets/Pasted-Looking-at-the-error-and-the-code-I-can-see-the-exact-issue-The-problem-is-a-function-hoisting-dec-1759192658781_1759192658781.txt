Looking at the error and the code, I can see the exact issue. The problem is a function hoisting/declaration order issue in MapCanvas.jsx.

🔍 Root Cause Analysis
The error Cannot access 'handleCanvasHover' before initialization occurs because:

Line 479: The handleMouseMove function references handleCanvasHover in its dependency array
Line 562: The handleCanvasHover function is declared AFTER handleMouseMove
JavaScript Hoisting: useCallback creates the function immediately, but handleCanvasHover hasn't been declared yet
📍 The Problem Code
Lines 479 (dependency array) and 477 (function call):

const handleMouseMove = useCallback((event) => {
  // ... code ...
  } else if (!isDragging) {
    handleCanvasHover(event); // ❌ Calling function before it's declared
  }
}, [isDragging, lastMousePos, dragStartPos, cameraRef, calculateTileSize, renderMap, handleCanvasHover]); // ❌ Referencing in deps before declaration
Line 562 (actual declaration):

const handleCanvasHover = useCallback((event) => {
  // ... function body ...
}, [gameMapRef, cameraRef, playerRef, handleTileHover, calculateTileSize]);
🎯 What Needs to Change
The fix is simple: Move the handleCanvasHover function declaration BEFORE the handleMouseMove function declaration.

Current order (BROKEN):

handleMouseDown (line ~440)
handleMouseMove (line ~450) ← references handleCanvasHover
handleMouseUp (line ~490)
handleWheel (line ~500)
handleCanvasClick (line ~520)
handleCanvasHover (line ~562) ← declared here, too late!
Correct order (WORKING):

handleMouseDown
handleCanvasHover ← Move this UP
handleMouseMove ← Now this can reference handleCanvasHover
handleMouseUp
handleWheel
handleCanvasClick
🔧 Why This Keeps Happening
This is a classic JavaScript temporal dead zone issue with useCallback. Unlike regular function declarations (which are fully hoisted), useCallback creates the function during the execution phase, so the dependency array is evaluated immediately when the component renders.

The previous fixes didn't work because they were addressing dependency array content, not the fundamental declaration order problem.

✅ The Solution
Simply move the handleCanvasHover function definition above the handleMouseMove function definition in MapCanvas.jsx. That's it. No other changes needed.

This aligns perfectly with our Phase 1 goals from StateMachineProject.md - we're just fixing a function declaration order issue that's preventing the direct sub-context access pattern from working properly.