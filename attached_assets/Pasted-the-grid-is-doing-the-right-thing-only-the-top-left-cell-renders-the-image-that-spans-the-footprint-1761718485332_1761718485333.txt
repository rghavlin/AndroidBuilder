the grid is doing the right thing (only the top-left cell renders the image that spans the footprint), but the image source is missing, so the fallback glyph shows in that one cell. There are two concrete causes in your codebase:

imageId inconsistency in ItemDefs (extension vs no extension).
Your loader adds extensions when probing, so imageId must be a basename without .png. One place still has toolbox.png in the def, which makes the loader try toolbox.png.png etc, miss, and then you see the fallback. Switch that to toolbox. (You already have the right pattern elsewhere: imageId: 'toolbox', imageId: 'lunchbox'.)
Your loader’s contract confirms it appends extensions and falls back to default.png if it can’t find the asset.

Phase-5D spawn helpers create Items with no imageId.
In your console script you new Item({...}) for toolbox/lunchbox but never set imageId, so the grid can’t load an image and shows the fallback glyph in the top-left.

The fix (surgical & minimal)
A) Normalize imageId in ItemDefs (no extension)

File: client/src/game/inventory/ItemDefs.js

Change any imageId: 'toolbox.png' → imageId: 'toolbox' (same idea for other items).

Keep existing imageId: 'toolbox' / imageId: 'lunchbox' as-is.

This matches how ImageLoader.getItemImage(imageId) probes multiple extensions and uses default as a fallback.

B) Make sure spawned items carry imageId

You have three safe options—pick one:

B1 (quickest, dev-only): When you create test items in the Phase-5D console script, include imageId.
Example additions (same file where you create the test toolbox/lunchbox):

const toolbox = new Item({ /* … */, imageId: 'toolbox' });
const lunchbox = new Item({ /* … */, imageId: 'lunchbox' });


(These lines go alongside the existing new Item({...}) calls.)

B2 (preferred for consistency): Spawn via your defs factory so imageId is copied automatically:

import { createItemFromDef } from '././game/inventory/ItemDefs.js';
import { Item } from '././game/inventory/Item.js';
const tb = new Item(createItemFromDef('container.toolbox'));
const lb = new Item(createItemFromDef('container.lunchbox'));


Your createItemFromDef merges the def (which includes imageId once A is fixed) with overrides.

B3 (robust, once): In Item’s constructor, if imageId is missing but defId is present, pull imageId from ItemDefs[defId]. (This keeps console helpers simple and prevents future misses.)

C) One tiny read path cleanup (optional but bulletproof)

In UniversalGrid.tsx, you load images keyed by itemId (the Map key) but you later read via item.instanceId. Replace that read with the exact same key you wrote with so it can’t drift:
Change:

const imageSrc = itemImages.get(item.instanceId) || null;


To:

const imageSrc = itemImages.get(itemId) || null;


The loader loop stores by the Map key (itemId) already.

Why the stretch itself is fine

Your slot component is position:relative and the image uses absolute positioning with computed pixel width/height, object-fit: contain, and a subtle hover ring—exactly what we want for multi-cell coverage without distortion.
The grid computes top-left correctly (single image per multi-cell item) and you’re loading per-item images once and memoizing them. The only blockers were the missing/incorrect imageId values.

Using the folder images “going forward”

In every ItemDefs entry that should have art, add imageId: '<basename>' (no extension). Keep your assets in client/public/images/items/<basename>.(png|jpg|jpeg|gif|svg). The loader will probe extensions and fall back to default.

Your design doc already locks global slot size; your current rendering honors object-fit: contain, so uniform canvases (e.g., 64×64 or 64×32) work well without warping.

TL;DR (apply in this order)

Fix imageId in ItemDefs to use basenames (no “.png”).

Ensure test-spawned items have imageId (or spawn via createItemFromDef).

(Optional) Read itemImages by itemId in UniversalGrid.

Once those are in, the toolbox/lunchbox will render their PNGs, stretched across their full 2×2 / 2×1 footprints, with your hover ring—no more single-cell fallback. ✅