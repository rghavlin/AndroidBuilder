Scope: Phase 5D – fix item icons for containers so they load from /images/items and stretch across the item’s full grid footprint.
Non-Goals: No UI redesign, no new providers, no changes to init flow, no grid size changes, no deps.

Objective


Ensure dev-spawned containers (toolbox/lunchbox) are created from ItemDefs so instances carry imageId.


In UniversalGrid, render the stretched image overlay using the same key for storing and reading images.


Make sure the overlay container doesn’t clip multi-cell images.



Files to edit (only these)


client/src/components/Game/DevConsole.jsx


client/src/components/Inventory/UniversalGrid.tsx



Tasks
A) Dev Console spawns (Option B only)
File: client/src/components/Game/DevConsole.jsx


Import the factory and construct items from defs:
import { Item } from '../../game/inventory/Item.js';
+import { createItemFromDef } from '../../game/inventory/ItemDefs.js';



Replace manual constructors for toolbox & lunchbox with factory-based versions that preserve imageId:
-const toolbox = new Item({ /* manual fields */ });
+const toolbox = new Item({ ...createItemFromDef('container.toolbox'), instanceId: `toolbox-${Date.now()}` });

-const lunchbox = new Item({ /* manual fields */ });
+const lunchbox = new Item({ ...createItemFromDef('container.lunchbox'), instanceId: `lunchbox-${Date.now()}` });




Do not change any placement/spawn logic around these—just swap the constructors.

B) UniversalGrid item image lookup + overlay container
File: client/src/components/Inventory/UniversalGrid.tsx


Image cache key
In the effect that preloads images, we already do:
for (const [id, it] of items.entries()) {
  // load…
  imageMap.set(id, img.src); // key is itemId
}

At render time, read with the same key:
- const itemImageSrc = item ? (itemImages.get(item.instanceId) || null) : null;
+ const itemImageSrc = itemId ? (itemImages.get(itemId) || null) : null;

Also ensure the cell’s lookup uses the grid’s itemId:
const itemId = grid[y]?.[x] ?? null;
const item   = itemId ? items.get(itemId) : null;



Overlay container not clipping
Ensure the grid wrapper that hosts the absolute images is the positioning context and does not clip:
<div className="relative overflow-visible">
  {/* grid slots */}
  {/* absolute item <img> overlays */}
</div>

(If not using Tailwind here, equivalent inline styles:
{ position: 'relative', overflow: 'visible' }.)


Single stretched image per item (top-left only)
Keep the existing logic that finds the top-left cell for each multi-cell item and renders one absolutely-positioned <img>:
<img
  key={itemId}
  src={itemImageSrc}
  className="absolute pointer-events-none select-none"
  style={{
    left:   leftPx,   // x * (slotSize + GAP)
    top:    topPx,    // y * (slotSize + GAP)
    width:  wPx,      // itemW*slotSize + (itemW-1)*GAP
    height: hPx,      // itemH*slotSize + (itemH-1)*GAP
    objectFit: 'contain',
  }}
  alt={item?.name ?? 'item'}
/>

Use the existing slotSize and the existing gap constant (GAP is currently 2px) in the file; do not change styling choices.


Do not change GridSlot hover ring behavior or any other visuals.



Acceptance Criteria


Spawning toolbox/lunchbox from the Dev Console produces instances with imageId populated ('toolbox' / 'lunchbox').


Opening a ground container shows its items with one image rendered from /images/items/<imageId>.(png|jpg|jpeg|gif|svg); if missing, default.png is used.


The icon stretches across the full footprint (toolbox 2×2; lunchbox 2×1) using object-fit: contain and appears once (top-left cell), not duplicated per cell.


No clipping of the overlay (images can extend beyond a single slot).


No changes to initialization flow, providers, grid sizes, or other UI elements. All existing logs remain.



Quick Test Plan (manual)


Reload the app.


In the Dev Console: spawn a toolbox and a lunchbox with the existing commands.


Click the ground container:


Expect console logs like Successfully loaded item image: …/images/items/toolbox.png (or fallback default.png).


Visually, the image spans the correct number of grid cells with a subtle hover border.




Verify no other UI/initialization regressions.



If anything requires deviation from these constraints, stop and report instead of making broader changes.