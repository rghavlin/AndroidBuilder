I'll review the current state and analyze how to improve our documentation and procedures to prevent future issues.

Analysis of What Went Wrong
Looking at the recent chat history, the core issue was:

InventoryProvider mounted before InventoryManager was created - The provider was in the React tree but received null as the manager prop
No validation or fallback - The provider didn't gracefully handle the missing manager
Timing dependency - The provider expected a manager that didn't exist yet during initialization
Current Documentation Gaps
After reviewing UniversalGoals.md and InventoryPlan.md, I've identified these weaknesses:

1. Testing Location Not Specified
Neither doc explicitly states "use in-game console only"
This is critical because browser console and in-game console have different scopes
2. No "Blast Radius" Rules
Nothing prevents a subsystem change (inventory) from breaking core initialization
No isolation requirements
3. Missing Validation Requirements
No requirement to validate props/dependencies before using them
No "fail gracefully" mandate
4. No Mounting Order Rules
React providers can mount in any order
Nothing enforces that critical dependencies exist before dependent components mount
5. Insufficient Error Boundaries
Phase 5A mentions dev-console bridge but doesn't require error handling if manager is null
Recommended Documentation Updates
Here's what I suggest adding to UniversalGoals.md:

New Section: Testing & Debugging Protocol

## üß™ Testing & Debugging Protocol
**All testing must use the in-game Dev Console (`~` key), NOT the browser console.**
Why:
- In-game console has access to game context (player, map, inventory managers)
- Browser console only sees global window scope
- Dev console commands are designed for game state inspection
- Consistent testing environment across all features
**Before ANY code change:**
1. Open dev console
2. Run relevant test commands for the affected system
3. Verify expected behavior
4. Close PR only if console tests pass
**Browser console is only for:**
- React/build errors during development
- Network request debugging
- Performance profiling
New Section: Isolation & Blast Radius Rules

## üõ°Ô∏è Isolation & Blast Radius Rules
**Core Principle: Subsystem failures must not break initialization**
### Critical Systems (Cannot Break)
- Game initialization (GameInitializationManager)
- Player creation and rendering
- Map rendering
- Camera system
- Core game loop (turn management)
### Non-Critical Systems (Can Fail Gracefully)
- Inventory UI
- Sound system
- Achievement tracking
- Statistics display
### Requirements:
1. **Dependency Validation**
   - Always validate props/refs before use
   - Provide fallbacks for missing dependencies
   - Example:
     ```javascript
     if (!manager) {
       console.warn('[System] Manager not available, using fallback');
       return fallbackBehavior();
     }
     ```
2. **Graceful Degradation**
   - Non-critical systems should degrade, not crash
   - Show "Feature unavailable" UI instead of blank screen
   - Log clear warnings about what's missing
3. **Context Provider Guards**
   - All providers must validate their dependencies
   - Providers should conditionally render children
   - Example:
     ```jsx
     if (!criticalDependency) {
       return <LoadingFallback reason="Waiting for X" />;
     }
     return <Provider value={...}>{children}</Provider>;
     ```
4. **Mounting Order Enforcement**
   - Critical contexts (Game, Player, Map, Camera) mount first
   - Non-critical contexts (Inventory, Sound) mount after isGameReady
   - Use explicit gates, not just assumptions
New Section: The Golden Rules - Extended

### üö® Prevent Game-Breaking Changes
**Rule: Never break the initialization sequence**
- If adding to initialization, it goes in GameInitializationManager phases
- If it can fail, it must not stop the game from loading
- Test with `window.inventoryManager` etc. AFTER initialization completes
**Rule: All providers must validate dependencies**
- Check props before using them
- Provide development-mode warnings
- Have fallback behavior or conditional rendering
**Rule: Non-critical features use conditional mounting**
- Inventory mounts AFTER `isGameReady === true`
- Sound system mounts AFTER initialization
- Statistics mount AFTER game objects exist
**Rule: One source of truth per major system**
- Only ONE InventoryManager instance (created in GameInitializationManager)
- Only ONE GameInitializationManager instance (singleton pattern)
- Track instances in development mode to catch duplicates
Here's what I suggest adding to InventoryPlan.md:

Update Phase 5A to include validation:

### 5A ‚Äî Unify the InventoryManager (foundation)
**Implementation (with safety guards):**
3. **Plumb into InventoryProvider with validation:**
   - Change `InventoryProvider` to accept a **required** `manager` prop
   - **Add validation:** If manager is null/undefined, don't mount children
   - Show a development warning if manager is missing
   - **Remove** any internal `new InventoryManager()` construction
   
   ```jsx
   export const InventoryProvider = ({ children, manager }) => {
     // VALIDATION: Don't mount if no manager
     if (!manager) {
       if (process.env.NODE_ENV === 'development') {
         console.warn('[InventoryProvider] No manager provided - waiting for initialization');
       }
       return null; // or return <div>Loading inventory system...</div>
     }
     
     // Rest of implementation...
   };
Mount order in GameScreen.tsx:
InventoryProvider mounts ONLY when isGameReady === true
Not when isInitialized (state machine complete)
Not on component mount
Gate it explicitly:
return (
  <GameProvider>
    <PlayerProvider>
      <GameMapProvider>
        <CameraProvider>
          {isGameReady && inventoryManager && (
            <InventoryProvider manager={inventoryManager}>
              {/* UI components */}
            </InventoryProvider>
          )}
        </CameraProvider>
      </GameMapProvider>
    </PlayerProvider>
  </GameProvider>
);
Acceptance (console-driven):

Open in-game dev console (~ key)
Type: window.inventoryManager
Should see InventoryManager instance
Type: window.inv.getContainer('ground')
Should see ground container
If either is undefined: initialization hasn't completed or provider didn't mount
**Add new troubleshooting entry:**
```markdown
| Ground grid missing but game loads | InventoryProvider mounted before manager created; provider returned null; UI never rendered | Ensure InventoryProvider has conditional mount based on isGameReady AND manager existence |
| window.inventoryManager undefined | Dev console bridge not established; provider didn't mount or manager is null | Check GameContext logs for "InventoryManager created"; check InventoryProvider logs for "Dev console bridge established" |
Summary of Improvements
What this fixes:

Clear testing protocol - Everyone knows to use in-game console
Blast radius containment - Inventory can't break initialization
Explicit validation - All providers check their dependencies
Mounting order rules - Critical systems load first, non-critical after
Better error messages - Clear warnings when dependencies missing
The key insight:

The inventory system is non-critical. The game should load and be playable even if inventory UI doesn't render. By making it conditional on isGameReady and validating the manager prop, we prevent it from ever breaking the core game.

Would you like me to propose these documentation updates as file changes?