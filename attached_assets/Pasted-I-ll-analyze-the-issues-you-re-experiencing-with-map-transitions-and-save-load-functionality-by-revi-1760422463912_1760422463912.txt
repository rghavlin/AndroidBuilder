I'll analyze the issues you're experiencing with map transitions and save/load functionality by reviewing the recent chat history and examining the console logs.

Investigation Results
Based on the console logs and code analysis, I've identified the following issues:

Issue 1: Player Position Not Updated to South Spawn Point After Transition
Root Cause: The player is being moved to position (17, 122) during the animation from the old map, but the spawn position for the new map should be (17, 123). Looking at the logs:

[PlayerContext] Animation complete - moving player from (17, 72) to (17, 122)
But the transition expects:

[WorldManager] Player will spawn at (17, 123)
The animation system is completing movement to (17, 122), which was calculated based on the old map's transition point at (17, 0). However, the new map spawn should be (17, 123) - at the bottom of the new map.

The problem: The executeMapTransition in GameMapContext is attempting to move the player AFTER the animation completes, but the animation has already placed the player at the wrong position. The patch at the end of executeMapTransition tries to fix this, but the animation's final position is overriding it.

Issue 2: Load Game Fails After Turn End Post-Transition
Root Cause: When you load a game, the console shows:

[GameMap] Restored from JSON with 0 entities
This indicates the saved game has NO entities (including no player). This happens because:

The autosave triggers after turn end
At that point, the player has been removed from the old map but the state is inconsistent
The GameMap being saved has 0 entities because the player was removed during transition
Looking at the save/load flow:

The game saves with gameMap.toJSON() which serializes the current map state
But after a transition, if the player moves and ends turn, the old map reference might still be active in some contexts
The autosave captures a map with 0 entities
Issue 3: Animation System Interfering with Map Transitions
Root Cause: The cancelMovement() function is being called during transition:

[PlayerContext] INVESTIGATION: cancelMovement() called
[GameMapContext] - cancelMovement completed
But the player's movement animation was still calculating the final position based on the OLD map coordinates. The transition happens while the animation frame is still active, causing position conflicts.

Summary of Root Causes
Player spawn position issue: The movement animation completes to (17, 122) instead of the correct spawn position (17, 123) because the animation was calculated before the map transition
Save corruption after turn end: The autosave is capturing a gameMap with 0 entities because the map reference is stale or the player hasn't been properly re-added
Animation interference: The cancelMovement() is called but the animation frame may still execute one final update, placing the player at the wrong position
Recommended Fixes
Fix 1: In GameMapContext.executeMapTransition(), ensure cancelMovement() is called BEFORE any map operations and wait for it to complete:

// Cancel movement FIRST and wait
if (cancelMovement) {
  console.log('[GameMapContext] Calling cancelMovement() before map transition...');
  cancelMovement();
  // Wait for animation to fully stop
  await new Promise(resolve => setTimeout(resolve, 100));
}
Fix 2: After placing the player on the new map, force the camera to center on the ACTUAL player position, not the spawn position variable:

// After player is added to new map, center camera on player's actual position
if (cameraOperations && cameraOperations.centerOn) {
  cameraOperations.centerOn(currentPlayerRef.x, currentPlayerRef.y);
}
Fix 3: In the autosave logic, verify that the gameMap being saved actually has the player entity before saving:

// Before autosave, verify player is on the map
const playersOnMap = gameMapRef.current.getEntitiesByType('player');
if (playersOnMap.length === 0) {
  console.error('[GameContext] Autosave aborted - no player on map!');
  return;
}
The core issue is that the map transition is happening while animation state is still active, and the save system is capturing an inconsistent map state. The fixes need to ensure animation is fully stopped before transition, and that saves only happen when the game state is consistent.