Looking at the code and analyzing the dual state management pattern issue, here's the best approach to fix it according to the usegame() migration section in StateMachineProject.md:

Root Cause Analysis
The problem is that each context maintains both a ref AND state for the same object:

// In CameraContext.jsx
const cameraRef = useRef(null);
const [cameraState, setCameraState] = useState(null);
// In GameMapContext.jsx  
const gameMapRef = useRef(null);
const [gameMapState, setGameMapState] = useState(null);
Every time the camera position updates, setCameraState() is called, triggering React re-renders across the entire component tree.

Best Solution: Eliminate State, Keep Refs Only
Following the usegame() migration pattern, the fix is to:

Phase 1: Remove State from Contexts
Remove cameraState and gameMapState entirely
Expose cameraRef.current and gameMapRef.current directly
Stop calling setCameraState() and setGameMapState() on every update
Phase 2: Use Direct Sub-Context Access
Instead of components using useGame() which aggregates everything, they should use:

// MapCanvas should use direct access
const { gameMap } = useGameMap();
const { camera } = useCamera();
const { player } = usePlayer();
// Instead of:
const { gameMap, camera, player } = useGame();
Phase 3: Event-Driven UI Updates Only
For the rare cases when React needs to re-render (like animation completion), use events:

// Camera emits events for UI updates only when needed
camera.emit('animationComplete');
// React components listen for specific events, not every position change
Why This Fixes the Problem
Eliminates Excessive Re-renders: Camera position updates won't trigger React state changes
Follows StateMachineProject.md: Uses refs for game logic, minimal state for React
Aligns with Universal Goals: Event-driven architecture, modular contexts
Maintains Performance: requestAnimationFrame for smooth animation instead of React re-renders
Implementation Strategy
The StateMachineProject.md recommends this gradual migration:

Phase 1: Update new components to use direct sub-context access
Phase 2: Refactor existing components one by one
Phase 3: Remove useGame() when no longer used
Phase 4: Remove dual state management from contexts
This approach would eliminate the ~90 unnecessary re-renders per animation that are currently happening when the camera follows the player during movement.

The key insight is that game state changes (like camera position) should not trigger React re-renders unless the UI actually needs to update. The refs are sufficient for the game logic to function correctly.